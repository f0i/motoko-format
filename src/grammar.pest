num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

operation = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }

expr = { term ~ (operation ~ term)* }
term = _{ num | "(" ~ expr ~ ")" }

calculation = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " | "\t" }


Exp = {
  "asdf"
  //| "# id" ~ Exp?
  | Exp ~ "." ~ "qwer"
}



// helper
any_inline = {!NEWLINE ~ ANY}
space = {" " | "\t"}
EOL = {NEWLINE | EOI}

Lines = { NEWLINE+ }

// Syntax is follwing the documentation at github:
// https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc

Motoko = {
    SOI ~
    (
        Lines
        | Comment
    )*
    ~ EOI
}

// comments
Comment = { DocComment | LineComment | BlockComment }

DocComment = { ("/// " ~ any_inline* ~ EOL)+ }

LineComment = { "//"  ~ any_inline* ~ EOL }


BlockComment = { 
    "/*"
    ~ ((!("*/" | "/*") ~ ANY) | BlockComment)* // allow nested comments
    ~ "*/"
}

// copy & pasted from
// https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#keywords=
Keyword = {
    "actor" | "and" | "assert" | "async" | "await" | "break" | "case" | "catch" | "class" | "continue" | "debug"
    | "debug_show" | "do" | "else" | "flexible" | "false" | "for" | "from_candid" | "func" | "if" | "ignore" | "import"
    | "in" | "module" | "not" | "null" | "object" | "or" | "label" | "let" | "loop" | "private" | "public" | "query" | "return"
    | "shared" | "stable" | "switch" | "system" | "throw" | "to_candid" | "true" | "try" | "type" | "var" | "while"
}

Id = { ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_" )* }

Nat = { Num | "0x" ~ HexNum }
Num = { ASCII_DIGIT ~ ( "_"? ~ ASCII_DIGIT )* }
HexNum = { ASCII_HEX_DIGIT ~ ( "_"? ~ ASCII_HEX_DIGIT )* }
Sign = { "-" }

Frac = { Num }
HexFrac = { HexNum }
Float = {
  Num ~ "." ~ Frac?
  | Num ~ ("." ~ Frac?)? ~ ("e" | "E") ~ Sign? ~ Num
  | HexNum ~ "." ~ HexFrac?
  | "0x" ~ HexNum ~ ("." ~ HexFrac?)? ~ ("p" | "P") ~ Sign? ~ Num
}

Escape = { "n" | "r" | "t" | "\\" | "\'" | "\"" }


Character = { 
    "\\" ~ Escape
    | "\\" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
    | "\\{" ~ HexNum ~ "}"
    | !("\\") ~ any_inline
}

Char = { "'" ~ (!"'" ~ Character) ~ "'" }
Text = { "\"" ~ (!"\"" ~ Character)* ~ "\"" } // TODO: check "'" and '"' and ''' and """ in motoko

Lit = { Nat | Float | Char | Text }

// Operators

UnOp = { "-" | "+" | "^" | "!" }
RelOp = { "==" | "!=" | space ~ "<" ~ space | space ~ ">" ~ space | "<=" | ">=" } // 
BinOp = { "+" | "-" | "*" | "/" | "%" | "**" }
BitOp = { "&" | "|" | "^" | "<<" | space ~ ">>" | "<<>" | "<>>" | "+%" | "-%" | "*%" | "**%" }
// TextOp is also called binop in motoko on github
TextOp = { "#" }
Assignment = {
    ":=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "&=" | "|=" | "^=" 
    | "<<=" | ">>=" | "<<>=" | "<>>=" | "+%=" | "-%=" | "**%=" | "#="
}
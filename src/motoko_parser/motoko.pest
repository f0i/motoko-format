// helper
any_inline = @{ !NEWLINE ~ ANY }
space = @{ " " | "\t" }
EOL = _{ !(!NEWLINE) | EOI }

WHITESPACE = @{ ( space | NEWLINE )+ }
COMMENT = @{ Comment }
ShouldNewline = ${ (WHITESPACE | Comment)* }

// Lit
Lit = ${ Float | Nat | Char | Text }
Nat = ${ "0x" ~ HexNum | Num }
Num = @{ ASCII_DIGIT ~ ( "_"? ~ ASCII_DIGIT )* }
HexNum = @{ ASCII_HEX_DIGIT ~ ( "_"? ~ ASCII_HEX_DIGIT )* }
Sign = @{ "-" }

Frac = @{ Num }
HexFrac = @{ HexNum }
Float = @{
  Num ~ "." ~ Frac?
  | Num ~ ("." ~ Frac?)? ~ ("e" | "E") ~ Sign? ~ Num
  | "0x" ~ HexNum ~ "." ~ HexFrac?
  | "0x" ~ HexNum ~ ("." ~ HexFrac?)? ~ ("p" | "P") ~ Sign? ~ Num
}

Escape = @{ "n" | "r" | "t" | "\\" | "\'" | "\"" }

Character = @{
    "\\" ~ Escape
    | "\\" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
    | "\\u{" ~ HexNum ~ "}"
    | !("\\") ~ any_inline
}

Char = @{ "'" ~ (!"'" ~ Character) ~ "'" }
Text = @{ "\"" ~ (!"\"" ~ Character)* ~ "\"" }

Id = @{ !Keyword ~ IdStart ~ IdContinue* }
IdStart = @{ ASCII_ALPHA | "_" } // TODO: check
IdContinue = @{ ASCII_ALPHANUMERIC | "_" }

// comments
Comment = ${ ( DocComment | LineComment | BlockComment ) ~ SpacedComment? }
SpacedComment = ${ WHITESPACE? ~ Comment }
DocComment = ${ ("/// " ~ DocCommentContent ~ EOL)+ }
LineComment = ${ "//"  ~ LineCommentContent ~ EOL }
BlockComment = ${ "/*" ~ " "? ~ BlockCommentContent ~ "*/" }
DocCommentContent = @{ any_inline* }
LineCommentContent = @{ any_inline* }
BlockCommentContent = @{
    ((!("*/" | "/*") ~ ANY) | BlockComment)* // allow nested comments
}

// Syntax from grammar.txt
Motoko = {
  Header ~ Program ~ EOI
}
Header = ${
  SOI
  ~ WHITESPACE*
  ~ (Comment ~ ShouldNewline)?
}
Program = {
  CompleteImport* ~ LastImport?
  ~ CompleteDeclaration*
}


CompleteImport = { Import ~ EndOfImport }
LastImport = { Import ~ ShouldNewline }
EndOfImport = ${ Semicolon ~ ShouldNewline }
EndOfDeclaration = ${
  ( Semicolon | EOI )
  ~ ShouldNewline
}

CompleteDeclaration = { Declaration ~ EndOfDeclaration }


InvalidPart = { (!Semicolon ~ ANY)+ ~ Semicolon?}

Semicolon = @{ ";" }
EqualSign = @{ "=" }
Colon = @{ ":" }
Dot = @{ "." }
BracketOpen = @{ "(" }
BracketClose = @{ ")" }
SquareBracketOpen = @{ "[" }
SquareBracketClose = @{ "]" }
AngleBracketOpen = @{ "<" }
AngleBracketClose = @{ ">" }
Questionmark = @{ "?" }

Keyword = @{
    ("actor" | "and" | "assert" | "async" | "await" | "break" | "case" | "catch" | "class" | "continue" | "debug"
    | "debug_show" | "do" | "else" | "flexible" | "false" | "for" | "from_candid" | "func" | "if" | "ignore" | "import"
    | "in" | "module" | "not" | "null" | "object" | "or" | "label" | "let" | "loop" | "private" | "public" | "query" | "return"
    | "shared" | "stable" | "switch" | "system" | "throw" | "to_candid" | "true" | "try" | "type" | "var" | "while"
    ) ~ !IdContinue
}
KeywordActor = @{"actor" ~ !IdContinue}
KeywordAnd = @{"and" ~ !IdContinue}
KeywordAssert = @{"assert" ~ !IdContinue}
KeywordAsync = @{"async" ~ !IdContinue}
KeywordAwait = @{"await" ~ !IdContinue}
KeywordBreak = @{"break" ~ !IdContinue}
KeywordCase = @{"case" ~ !IdContinue}
KeywordCatch = @{"catch" ~ !IdContinue}
KeywordClass = @{"class" ~ !IdContinue}
KeywordContinue = @{"continue" ~ !IdContinue}
KeywordDebug = @{"debug" ~ !IdContinue}
KeywordDebugShow = @{"debug_show" ~ !IdContinue}
KeywordDo = @{"do" ~ !IdContinue}
KeywordElse = @{"else" ~ !IdContinue}
KeywordFlexible = @{"flexible" ~ !IdContinue}
KeywordFalse = @{"false" ~ !IdContinue}
KeywordFor = @{"for" ~ !IdContinue}
KeywordFromCandid = @{"from_candid" ~ !IdContinue}
KeywordFunc = @{"func" ~ !IdContinue}
KeywordIf = @{"if" ~ !IdContinue}
KeywordIgnore = @{"ignore" ~ !IdContinue}
KeywordImport = @{"import" ~ !IdContinue}
KeywordIn = @{"in" ~ !IdContinue}
KeywordModule = @{"module" ~ !IdContinue}
KeywordNot = @{"not" ~ !IdContinue}
KeywordNull = @{"null" ~ !IdContinue}
KeywordObject = @{"object" ~ !IdContinue}
KeywordOr = @{"or" ~ !IdContinue}
KeywordLabel = @{"label" ~ !IdContinue}
KeywordLet = @{"let" ~ !IdContinue}
KeywordLoop = @{"loop" ~ !IdContinue}
KeywordPrivate = @{"private" ~ !IdContinue}
KeywordPublic = @{"public" ~ !IdContinue}
KeywordQuery = @{"query" ~ !IdContinue}
KeywordReturn = @{"return" ~ !IdContinue}
KeywordShared = @{"shared" ~ !IdContinue}
KeywordStable = @{"stable" ~ !IdContinue}
KeywordSwitch = @{"switch" ~ !IdContinue}
KeywordSystem = @{"system" ~ !IdContinue}
KeywordThrow = @{"throw" ~ !IdContinue}
KeywordToCandid = @{"to_candid" ~ !IdContinue}
KeywordTrue = @{"true" ~ !IdContinue}
KeywordTry = @{"try" ~ !IdContinue}
KeywordType = @{"type" ~ !IdContinue}
KeywordVar = @{"var" ~ !IdContinue}
KeywordWhile = @{"while" ~ !IdContinue}

KeywordNullType = @{"Null" ~ !IdContinue}
KeywordNoneType = @{"None" ~ !IdContinue}
KeywordAnyType = @{"Any" ~ !IdContinue}
KeywordErrorType = @{"Error" ~ !IdContinue}

KeywordUnderscore = @{"_" ~ !IdContinue}

// Imports
Import = { KeywordImport ~ PatternNullary ~ EqualSign? ~ Text }
PatternNullary = {
  "{" ~ /*List*/ (PatternField  ~ (Semicolon ~ PatternField)* ~ Semicolon?)? ~ "}"
  | PatternPlain
}
PatternField = {
  Id ~ (":" ~ Type)? ~ (EqualSign ~ Pattern)?
}
Pattern = { PatternBin }
PatternBin = {
  PatternUn ~ (KeywordOr ~ PatternBin)* ~ (Colon ~ Type)*
  | BracketOpen ~ PatternBin ~ BracketClose
}
PatternPlain = {
  KeywordUnderscore
  | BracketOpen ~ /*List*/(PatternBin ~ ("," ~ PatternBin)* ~ ","?)? ~ BracketClose
  | Lit
  | Id
  // TODO: check
  | KeywordTrue
  | KeywordFalse
  | KeywordNull
}

PatternUn = {
  "#" ~ Id ~ PatternNullary?
  | "?" ~ PatternUn
  | UnOp ~ Lit
  | PatternNullary
  | "(" ~ PatternUn ~ ")"
}

UnOp = @{ "+" | "-" | "^" }

Type = {
    TypeNoBin ~ ((KeywordAnd | KeywordOr) ~ Type)?
    | "(" ~ (Type ~ ("," ~ Type)* ~ ","?)? ~ ")" // Tuple (language-manual.adoc)
    | KeywordNullType
    | KeywordNoneType
    | KeywordAnyType
    | KeywordErrorType
    | KeywordActor // TODO: check
}

TypeNoBin = {
    // original: FuncSort? ~ TypeBindList? ~ TypeUn ~ "->" ~ TypeNoBin | TypePre
    // refactored for perfomance (avoid exponential recursion)
    (FuncSort ~ TypeBindList? | TypeBindList) ~ TypeUn ~ "->" ~ TypeNoBin
    | TypeUn ~ ("->" ~ TypeNoBin)?
    | TypePre
}

FuncSort = {
  KeywordShared ~ KeywordQuery?
  | KeywordQuery
}

TypePre = {
    KeywordAsync ~ TypePre
    | ObjSort ~ TypeObj
    | TypeUn
}

ObjSort = { KeywordObject | KeywordActor | KeywordModule }

TypeBind = { Id ~ ("<:" ~ Type)? }

TypeUn = {
  "?" ~ TypeUn
  | TypeNullary
}

TypeNullary = {
    "(" ~ /*List*/(TypeItem ~ ("," ~ TypeItem)* ~ ","?)? ~ ")"
    | "[" ~ "var"? ~ Type ~ "]"
    | TypeVariant
    | TypeObj
    | Id ~ (Dot ~ Id)* ~ TypeArgs?
}
TypeItem = { (Id ~ ":")? ~ Type }

TypeVariant = {
    "{" ~ "#" ~ "}"
    | "{" ~ /*List1*/(TypeTag ~ (Semicolon ~ TypeTag)* ~ Semicolon?) ~ "}"
}

TypeObj = {
    "{" ~ /*List*/(TypeField ~ (Semicolon ~ TypeField)* ~ Semicolon?)? ~ "}"
}

TypeTag = {
  "#" ~ Id ~ (":" ~ Type)?
}

TypeArgs = {
  "<" ~ /*List*/(Type ~ ("," ~ Type)* ~ ","?)? ~ ">"
}

TypeField = {
  "var"? ~ Id ~ ":" ~ Type
  | Id ~ TypeBindList? ~ TypeNullary ~ ":" ~ Type
}

TypeBindList = {
  "<" ~ /*List*/(TypeBind ~ ("," ~  TypeBind)* ~ ","?)? ~ ">"
}

Declaration = {
  ( DeclarationVar
  | DeclarationNonVar
  | ExpNonDec
  // TODO!: not in spec! check!:
  | KeywordTrue
  | KeywordFalse
  | KeywordNull
  ) ~ COMMENT? // hack to collect all tailing whitespace and comments
}

DeclarationVar = {
  "var" ~ Id ~ (":" ~ Type)? ~ EqualSign ~ Exp
}

DeclarationNonVar = {
  KeywordLet ~ Pattern ~ EqualSign ~ Exp
  | KeywordType ~ Id ~ TypeBindList? ~ EqualSign ~ Type
  | ObjSort ~ Id? ~ EqualSign? ~ ObjBody
  // func: anonymous
  | SharedPattern2? ~ KeywordFunc ~ TypeBindList? ~ PatternPlain ~ (Colon ~ Type)? ~ FuncBody
  | SharedPattern? ~ KeywordFunc ~ TypeBindList? ~ PatternPlain ~ (Colon ~ Type)? ~ FuncBody
  // func: named
  | SharedPattern2? ~ KeywordFunc ~ Id ~ TypeBindList? ~ PatternPlain ~ (Colon ~ Type)? ~ FuncBody
  | SharedPattern? ~ KeywordFunc ~ Id ~ TypeBindList? ~ PatternPlain ~ (Colon ~ Type)? ~ FuncBody
  // class
  | SharedPattern2? ~ ObjSort? ~ KeywordClass ~ Id?  ~ TypeBindList?  ~ PatternPlain ~ (":" ~ Type)? ~ ClassBody
  | SharedPattern? ~ ObjSort? ~ KeywordClass ~ Id?  ~ TypeBindList?  ~ PatternPlain ~ (":" ~ Type)? ~ ClassBody
}

ClassBody = {
  (EqualSign ~ Id?)? ~ ObjBody
}

SharedPattern = {
    KeywordShared ~ KeywordQuery? ~ PatternPlain
    | KeywordQuery ~ PatternPlain
    | KeywordQuery
}
SharedPattern2 = {
    KeywordShared ~ KeywordQuery?
    | KeywordQuery
}

FuncBody = {
  "=" ~ Exp
  | Block
}

Block = {
  "{"
  ~ /*List*/(Declaration ~ (Semicolon ~ Declaration)* ~ Semicolon?)?
  ~ "}"
}

ObjBody = {
  "{"
  ~ /*List*/(DeclarationField ~ (Semicolon ~ DeclarationField)* ~ Semicolon?)?
  ~ "}"
}
DeclarationField = { Visibility? ~ Stability? ~ Declaration }
Visibility = { KeywordPrivate | KeywordPublic | KeywordSystem }
Stability = { KeywordFlexible | KeywordStable }

Exp = {
  DeclarationVar
  | ExpNonVar
  | ParenthesizedExp
  | TupleExp // TODO!: not in spec! check!
}

// https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#parentheses
ParenthesizedExp = {
  "(" ~ Exp ~ ")"
}

TupleExp = {
  "(" ~ Exp ~ ("," ~ Exp)* ~ ","? ~ ")"
}

ExpNonVar = {
  ExpNonDec
  | DeclarationNonVar
}

ExpNonDec = {
  KeywordAssert ~ ExpNest
  | KeywordAsync ~ ExpNest
  | KeywordAwait ~ ExpNest
  | KeywordBreak ~ Id ~ ExpNullary?
  | KeywordContinue ~ Id
  | KeywordDebug ~ ExpNest
  | KeywordDo ~ "?"? ~ Block
  | KeywordFor ~ "(" ~ Pattern ~ KeywordIn ~ Exp ~ ")" ~ ExpNest
  | KeywordIf ~ ExpNullary ~ ExpNest ~ (KeywordElse ~ ExpNest)?
  | KeywordIgnore ~ ExpNest
  | KeywordLabel ~ Id ~ (":" ~ Type)? ~ ExpNest
  | KeywordLoop ~ ExpNest ~ (KeywordWhile ~ ExpNest)?
  | KeywordReturn ~ Exp?
  | KeywordSwitch ~ ExpNullary ~ "{" ~ /*List*/(Case ~ (Semicolon ~ Case)* ~ Semicolon?)? ~ "}"
  | KeywordThrow ~ ExpNest
  | KeywordTry ~ ExpNest ~ Catch
  | KeywordWhile ~ ExpNullary ~ ExpNest
  | ExpBin ~ (ColonEqual ~ Exp | BinAssign ~ Exp)?
}

ColonEqual = @{ ":=" }

Case = {
  KeywordCase ~ PatternNullary ~ ExpNest
}

Catch = {
  KeywordCatch ~ PatternNullary ~ ExpNest
}

ExpNest = { Block | Exp }

BinAssign = @{
  "%="
  | "&="
  | "*%="
  | "**%="
  | "**-"
  | "*="
  | "+%="
  | "+="
  | "-%="
  | "-="
  | "/="
  | "<<="
  | "<<>="
  | "<>>="
  | ">>="
  | "@="
  | "^="
  | "|="
  | BinOp ~ "="
}

// Sample matches: Id, "[]"
ExpUn = {
    Questionmark ~ ExpUn
    | "actor" ~ ExpPlain
    | "not" ~ ExpUn
    | "debug_show" ~ ExpUn
    | "to_candid" ~ ExpList
    | "from_candid" ~ ExpUn
    | "#" ~ Id ~ ExpNullary?
    | UnOp ~ ExpUn
    | UnAssign ~ ExpUn
    | ExpPost
    | "(" ~ ExpUn ~ ")"
}

// Sample matches: Id, "[]", "{" Id "}", "{}", Id Id Id
ExpPost = {
  ( BracketOpen ~ ExpPost ~ BracketClose
    | "[" ~ KeywordVar?
    ~ /*List*/(ExpNonVar ~ ("," ~ ExpNonVar)* ~ ","?)?
    ~ "]" // Arrays
    | ExpNullary
  )
  ~ ExpPostContinue* // TODO: was ? now *. check
}

ExpPostContinue = {
  ExpPost
  | "[" ~ Exp ~ "]"
  | Dot ~ Nat
  | Dot ~ Id
  | ("<" ~ /*List*/(Type ~("," ~ Type)* ~ ","?)? ~ ">")? ~ ExpNullary
  | BANG
}

BANG = @{ "!" ~ !"=" }

// Sample matches: Id, "{" Id "}", "{}"
ExpNullary = {
  ExpObj
  | ExpPlain
  | Id
  // TODO: check
  | KeywordTrue
  | KeywordFalse
  | KeywordNull
}


// Sample matches "{" Id "}"
ExpObj = {
  "{" ~ /*List*/(ExpField ~ (Semicolon ~ ExpField)* ~ Semicolon?)? ~ "}"
}

ExpField = {
  "var"? ~ Id ~ (":" ~Type)? ~ ("=" ~ Exp)?
}

UnAssign = { "+=" | "-=" | "^=" }

ExpList = {
  "(" ~ /*List*/(Exp ~ ("," ~ Exp)* ~ ","?)? ~ ")"
}

ExpPlain = {
  ExpList
  | Lit
}

ExpBin = {
  ExpUn ~ ExpBinContinue?
}

ExpBinContinue = {
  (KeywordAnd ~ ExpBin
  | KeywordOr ~ ExpBin
  | Colon ~ TypeNoBin ~ ExpBinContinue?
  | BinOp ~ ExpBin
  | RelOp ~ ExpBin
  )
  ~ (TypeArgs? ~ Exp?) // TODO!: not in spec! check!
}

RelOp = @{
  "=="
  | "!="
  | "<="
  | "<" ~ WHITESPACE // can't match leading spaces
  | ">="
  | ">" ~ WHITESPACE // can't match leading spaces
}

BinOp = @{
    "#"
    | "%"
    | "&"
    | "*%"
    | "**%"
    | "**"
    | "*"
    | "+%"
    | "+"
    | "-%"
    | "-"
    | "/"
    | "<<>"
    | "<<"
    | "<>>"
    | ">>" /* can't match leading space */
    | "^"
    | "|"
}
